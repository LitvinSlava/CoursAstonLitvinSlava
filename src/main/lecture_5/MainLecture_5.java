package src.main.lecture_5;

public class MainLecture_5 {
    public static void main(String[] args) {

/*        Задание 1:
        Создать классы Собака и Кот с наследованием от класса Животное.
        Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия. Результатом выполнения действия будет печать в консоль. (Например,dogBobik.run(150); ? 'Бобик пробежал 150 м.');
        У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).
        Добавить подсчет созданных котов, собак и животных.
        Расширить задачу, добавив для котов возможность кушать из миски, выполнив следующие пункты:
        - Сделать так, чтобы в миске с едой не могло получиться отрицательного количества еды (например, в миске 10 еды, а кот пытается покушать 15-20).
        - Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды), сытость = true.
                - Считаем, что если коту мало еды в миске, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
        - Создать массив котов и миску с едой, попросить всех котов покушать из этой миски и потом вывести информацию о сытости котов в консоль.
                - Добавить метод, с помощью которого можно было бы добавлять еду в миску*/
        // Создание животных
        Dog dog1 = new Dog("Бобик");
        Dog dog2 = new Dog("Шарик");
        Cat cat1 = new Cat("Мурзик");
        Cat cat2 = new Cat("Барсик");

        // Проверка бега и плаванья
        dog1.run(501);
        dog1.run(499);
        dog1.swim(11);
        dog1.swim(9);

        cat1.run(201);
        cat1.run(199);
        cat1.swim(1);

        // Создаем миску и массив котов
        Bowl bowl = new Bowl(30);
        Cat[] cats = {cat1, cat2};

        // Кормим котов
        for (Cat cat : cats) {
            cat.eat(bowl, 20);
        }

        // Проверяем сытость котов
        for (Cat cat : cats) {
            System.out.println(cat.getName() + " сыт: " + cat.isFull());
        }

        // Добавляем еду в миску
        bowl.addFood(50);

        // Снова кормим котов
        for (Cat cat : cats) {
            cat.eat(bowl, 20);
        }

        // Проверяем сытость котов
        for (Cat cat : cats) {
            System.out.println(cat.getName() + " сыт: " + cat.isFull());
        }

        // Выводим количество созданных животных
        System.out.println("Всего животных: " + Animal.getAnimalCount());
        System.out.println("Всего собак: " + Dog.getDogCount());
        System.out.println("Всего котов: " + Cat.getCatCount());


/*        Задание 2:
        Применяя интерфейсы написать программу расчета периметра и площади геометрических фигур:
        - круг,
        - прямоугольник,
        - треугольник.
        Задать для каждой фигуры цвет заливки и цвет границы.
        Результат полученных характеристик [Периметр, площадь, цвет фона, цвет границ] по каждой фигуре вывести в консоль.
        Попробуйте реализовать базовые методы, такие как расчет периметра фигур, в качестве абстрактных методов в интерфейсе.*/
        // Создаем фигуры
        Figure circle = new Circle(5.0, "Красный", "Черный");
        Figure rectangle = new Rectangle(4.0, 6.0, "Синий", "Белый");
        Figure triangle = new Triangle(3.0, 4.0, 5.0, "Зеленый", "Желтый");

        // Выводим информацию о фигурах
        System.out.println("Характеристики круга:");
        circle.printInfo();

        System.out.println("Характеристики прямоугольника:");
        rectangle.printInfo();

        System.out.println("Характеристики треугольника:");
        triangle.printInfo();
    }
}
